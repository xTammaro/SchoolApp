/**

public abstract class UserModel {
    // Fields:
    protected String username;
    protected String password;
    protected Role role;               # The role class will define permissions for the user
    protected List<Subjects> subjects;
    protected Map<Subject, Integer> subjectScores; # Will need to work with executive function class
    protected List<UserModel> accessibleUsers;
    protected List<ClassRoom> classes; # Need a way to allocate students/lecturers to classes so they can link to one another

//


    // Constructor, getters, and setters for common fields

    /**
     * Returns the list of users that the current user has access to.
     */
    public abstract List<UserModel> getAccessibleUsers();


}

public class Parent extends UserModel {
    // Parent-specific fields, methods, and implementation of getAccessibleUsers()

    public void setChild(UserModel child) {
        this.accessibleUsers.add(child)
      // These type of functions are called by our "UserController" class when the user wants to interact with their model.
      // Might make more sense to add a parent from a child user rather than add child from parent?
    }
    @Override
    public List<UserModel> getAccessibleUsers() {
        // Implement logic to return the list of children for the parent
    }
}

public class Lecturer extends UserModel {
    // Lecturer-specific fields, methods, and implementation of getAccessibleUsers()


    }


    @Override

    public List<UserModel> setAccessibleUsers() {
        // Implement logic to return the list of students for the lecturer

        // Need java class "classroom" with subject, classroom code, lecturer, list of students etc.
        // Loop through classrooms, add users in lecturers class.

    }
}

public class Student extends UserModel {
    // Student-specific fields, methods


    public(maybe private) Set<UserModel> friends


    public void addFriend(UserModel friend)
    public void removeFriend(UserModel friend)




    public void joinClass(Integer classCode, String password) {

    ///
        for class in ClassRooms.getClasses() {
            // Loop through classrooms

    }



    public List<UserModel> getAccessibleUsers() {
        // Implement logic to return an empty list or throw an exception as students do not have access to other users
    }
}

// To adhere to assignment criteria we could implement this using factory method:

public class UserFactory {

    public static UserModel createUser(Role role, String username, String password) {

    // Lecturers will need some sort of access code (lecturer user requires special permission)
        switch (role.getName()) {
            case "parent":
                return new Parent(username, password, role);
            case "lecturer":
                return new Lecturer(username, password, role);
            case "student":
                return new Student(username, password, role);
            default:
                throw new IllegalArgumentException("Invalid role provided");
        }
    }
}


**/